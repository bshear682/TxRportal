using System;
using System.Diagnostics;
using System.IO;
using System.Net.Mail;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FileTransferApp
{
    public partial class MainForm : Form
    {
        private string selectedFilePath = string.Empty;

        public MainForm()
        {
            InitializeComponent();
            lblUser.Text = "Current User: " + Environment.UserName;
            PopulateDestinations();
            rbNo.Checked = true; // Default to 'No'
            txtOtherUser.Enabled = false; // Disable textbox initially
            progressBar.Visible = false; // Hide progress bar initially
        }

        private void btnBrowse_Click(object sender, EventArgs e)
        {
            using (OpenFileDialog openFileDialog = new OpenFileDialog())
            {
                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    selectedFilePath = openFileDialog.FileName;
                    txtFilePath.Text = selectedFilePath;
                }
            }
        }

        private void PopulateDestinations()
        {
            // Add predefined destination paths
            cmbDestination.Items.Add("C:\\Users\\Public\\Documents");
            cmbDestination.Items.Add("D:\\Shared\\Transfers");
            cmbDestination.Items.Add("E:\\Backup");
            cmbDestination.SelectedIndex = 0;
        }

        private string GetSelectedRobocopyOptions()
        {
            StringBuilder options = new StringBuilder();
            if (rbE.Checked) options.Append(" /E");
            if (rbZ.Checked) options.Append(" /Z");
            if (rbMIR.Checked) options.Append(" /MIR");
            if (rbXO.Checked) options.Append(" /XO");
            if (rbXD.Checked) options.Append(" /XD Temp");
            return options.ToString().Trim();
        }

        private async void btnTransfer_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(selectedFilePath))
            {
                MessageBox.Show("Please select a file to transfer.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string destinationRoot = cmbDestination.SelectedItem.ToString();
            string timestamp = DateTime.Now.ToString("yyyyMMdd_HH-mm-ss");
            string userFolderName = $"{Environment.UserName}_{timestamp}";
            string destinationFolder = Path.Combine(destinationRoot, userFolderName);
            string destinationFilePath = Path.Combine(destinationFolder, Path.GetFileName(selectedFilePath));
            string robocopyOptions = GetSelectedRobocopyOptions();

            Directory.CreateDirectory(destinationFolder); // Ensure destination folder exists

            string transferUser = rbYes.Checked ? txtOtherUser.Text.Trim() : "";

            progressBar.Visible = true;
            progressBar.Style = ProgressBarStyle.Marquee;

            try
            {
                await Task.Run(() => RunRobocopy(selectedFilePath, destinationFolder, robocopyOptions));
                SendConfirmationEmail(Environment.UserName, transferUser, destinationFilePath);
                MessageBox.Show("File transfer request submitted successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message, "Transfer Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                progressBar.Visible = false;
                txtFilePath.Clear();
                txtOtherUser.Clear();
                selectedFilePath = string.Empty;
                rbNo.Checked = true; // Reset radio buttons
            }
        }

        private void RunRobocopy(string sourcePath, string destinationPath, string robocopyOptions)
        {
            Process robocopyProcess = new Process();
            robocopyProcess.StartInfo.FileName = "cmd.exe";
            robocopyProcess.StartInfo.Arguments = $"/c robocopy \"{Path.GetDirectoryName(sourcePath)}\" \"{destinationPath}\" \"{Path.GetFileName(sourcePath)}\" {robocopyOptions}";
            robocopyProcess.StartInfo.UseShellExecute = false;
            robocopyProcess.StartInfo.RedirectStandardOutput = true;
            robocopyProcess.StartInfo.RedirectStandardError = true;
            robocopyProcess.StartInfo.CreateNoWindow = true;
            robocopyProcess.Start();
            robocopyProcess.WaitForExit();
        }

        private void SendConfirmationEmail(string userName, string transferUser, string destinationFilePath)
        {
            try
            {
                MailMessage mail = new MailMessage();
                SmtpClient smtpServer = new SmtpClient("your-exchange-server"); // Replace with your local Exchange server address
                
                mail.From = new MailAddress("no-reply@yourdomain.com"); // Replace with your domain
                mail.To.Add("CYBERSECURITY@domain.com"); // Send to cybersecurity team
                mail.CC.Add($"{userName}@yourdomain.com"); // CC the requesting user
                mail.Subject = "File Transfer Request";
                
                string emailBody = $@"<html>
                    <head>
                        <style>
                            body {{ font-family: Arial, sans-serif; }}
                            .content {{ padding: 15px; }}
                        </style>
                    </head>
                    <body>
                        <div class='content'>
                            <p>A request to transfer data has been submitted by <strong>{userName}</strong>.</p>
                            {(string.IsNullOrEmpty(transferUser) ? "" : $"<p>The request was submitted on behalf of <strong>{transferUser}</strong>.</p>")}
                            <p><strong>File saved at:</strong> {destinationFilePath}</p>
                        </div>
                    </body>
                </html>";
                
                mail.Body = emailBody;
                mail.IsBodyHtml = true;

                smtpServer.Port = 25;
                smtpServer.UseDefaultCredentials = true;
                smtpServer.Credentials = CredentialCache.DefaultNetworkCredentials;
                smtpServer.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtpServer.EnableSsl = false;

                smtpServer.Send(mail);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to send email: " + ex.Message, "Email Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}
